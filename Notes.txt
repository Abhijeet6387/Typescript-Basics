Types in TS :
Number, Boolean, String, Null, Undefined, Void, Object, Arrays, Tuples, Never, Unknown...

Syntax :
let variableName : type = value

Any Keyword :
When you don't specify a type, and typescript can't infer it from the context, the compiler will typically default to "any"
Avoid using it, as "any" is not type-checked. Use "noImplicitAny" to flag an implicit "any" as an error.

Never :
The never type represents values which are never observed. In a return type, this means that the function throws an exception or terminates execution of the program.

Tuples :
Tuple is a data structure that allows you to store a fixed-size collection of elements of different types. 
Unlike arrays where elements can be of the same type and can be accessed using numerical indices, tuples allow you to specify the type of each element explicitly and access them by their position within the tuple.

Interfaces :
Interfaces are mainly used to define the shape or structure of an object. They describe the properties and methods that an object should have.
Interfaces support inheritance. You can extend one interface from another using the extends keyword.
When you declare multiple interfaces with the same name, TypeScript merges them into a single interface.

Difference between Interfaces and Type Aliases :
Interfaces are mainly for defining object shapes, supporting inheritance, and declaration merging. They are open for extension and used when defining the structure of objects.
Type aliases are for creating aliases for any type, including primitives, unions, intersections, and complex types. They are more flexible for defining complex types but cannot be extended or used for inheritance.

Abstract Classes V/s Interfaces :
Abstract classes and interfaces in TypeScript are both mechanisms for defining contracts that classes must adhere to.

Abstract Classes:
Definition: Abstract classes are classes that cannot be instantiated directly. They are primarily designed to be subclassed, serving as blueprints for other classes.
Methods: Abstract classes can have both abstract and concrete methods. Abstract methods are declared without an implementation and must be implemented by subclasses. 
        Concrete methods have implementations and can optionally be overridden by subclasses.
Constructor: Abstract classes can have constructors, which are invoked when subclasses are instantiated. Constructors of abstract classes can initialize properties or perform other setup tasks.
Access Modifiers: Abstract classes can have members (properties and methods) with public, protected, or private access modifiers.
Single Inheritance: TypeScript supports single inheritance, meaning a subclass can inherit from only one abstract class.

Interfaces:
Definition: Interfaces are purely structural contracts. They define the shape of an object, specifying the properties and methods it must have, without providing any implementation.
Methods: Interfaces can only declare method signatures (names, parameters, and return types) but not provide implementations. 
        Classes that implement interfaces must provide implementations for all the methods declared in the interface.
No Constructors: Interfaces cannot contain constructor definitions because they are purely structural and do not provide implementations.
No Access Modifiers: Interfaces cannot specify access modifiers for members. All members are implicitly public and cannot have a private or protected modifier.
Multiple Inheritance: TypeScript supports multiple inheritance through interfaces. A class can implement multiple interfaces, inheriting the shape from all of them.

Generics :
Generics in TypeScript allow you to create reusable components that can work with various types. 
They enable you to define functions, classes, and interfaces with placeholders for the types of parameters, return values, or properties, making your code more flexible and maintainable.

Instance of :
"instanceof" operator is used to check whether an object is an instance of a particular class or constructor function. 
It returns true if the object is an instance of the specified class or constructor, and false otherwise.

Type Predicates :
Type predicates allows you to define custom functions that act as type guards. 
These functions take an input parameter and return a boolean value indicating whether the input is of a specific type. 
If TypeScript can narrow down the type of a variable based on a type predicate, it will use that narrowed type in the scope where the type predicate is called.

Discriminated Unions :
A discriminated union is a type pattern used to combine multiple types into one union where each type includes a common discriminant property. 
This discriminant property is a literal type (such as a string or number) that uniquely identifies each subtype within the union.

Exhaustive Checking :
Exhaustive checking ensures that all possible cases of a discriminated union are handled in a switch statement or conditional statement.
The default case is used to assert that the switch statement is exhaustive. 
In the example, By assigning shape to a variable with the never type, TypeScript ensures that it's impossible to reach this code block, providing compile-time safety against missing cases.
